const { Client, GatewayIntentBits, ButtonBuilder, ActionRowBuilder, ButtonStyle } = require('discord.js');
const { google } = require('googleapis');
const path = require('path');
const fs = require('fs');

// Проверка наличия файла
const keyFilePath = path.join(__dirname, 'silent-vent-458121-c6-ad325a0d972a.json');
if (!fs.existsSync(keyFilePath)) {
  console.error('Файл с ключом не найден:', keyFilePath);
  process.exit(1); // Завершение программы с ошибкой
}

// Настройка аутентификации
const auth = new google.auth.GoogleAuth({
  keyFile: keyFilePath,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets('v4'); // Инициализация Google Sheets API

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

// Создание кнопки "Получить информацию"
const button = new ButtonBuilder()
  .setCustomId('get_user_info')
  .setLabel('Получить информацию')
  .setStyle(ButtonStyle.Primary);

const row = new ActionRowBuilder().addComponents(button);

// Пример обработки сообщений
client.on('messageCreate', async (message) => {
  if (message.content === '!start') {
    await message.channel.send({ content: 'Привет! Нажмите кнопку ниже, чтобы получить информацию.', components: [row] });
  }

  // Обработка команды !infouser
  if (message.content.startsWith('!infouser ')) {
    const query = message.content.split(' ')[1]; // Получаем запрос (никнейм или SSN)
    if (!query) {
      await message.channel.send('Пожалуйста, укажите никнейм или SSN.');
      return;
    }

    try {
      const sheetsClient = await auth.getClient();
      const spreadsheetId = '12jbeY4ENdD3-6RLe3Haek7aKK0uN5t5dvhj-U-bBeQM'; // ID вашей таблицы
      const range = 'Old Version!A:I'; // Убедитесь, что это имя вашего листа и диапазон

      const response = await sheets.spreadsheets.values.get({
        auth: sheetsClient,
        spreadsheetId,
        range,
      });

      const rows = response.data.values;
      console.log('Полученные строки:', rows); // Логируем полученные данные

      if (rows && rows.length) {
        // Ищем никнейм в первом столбце (row[0]) или SSN во втором (row[1])
        const userInfo = rows.find(row => row[0].toLowerCase().includes(query.toLowerCase()) || row[1] === query);
        if (userInfo) {
          await message.channel.send(`Информация о пользователе: Nickname: ${userInfo[0]}, SSN: ${userInfo[1]}, Rank: ${userInfo[2]}, Awards: ${userInfo[3]}, Punishments: ${userInfo[4]}, Government support: ${userInfo[5]}, Note: ${userInfo[6]}, Date of enter: ${userInfo[7]}, Date of retirement: ${userInfo[8]}`);
        } else {
          await message.channel.send('Пользователь не найден.');
        }
      } else {
        await message.channel.send('Нет данных в таблице.');
      }
    } catch (error) {
      console.error('Ошибка при получении данных:', error);
      await message.channel.send('Произошла ошибка при получении данных.');
    }
  }
});

// Обработчик нажатий на кнопки
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return; // Игнорируем все, кроме кнопок

  if (interaction.customId === 'get_user_info') {
    const userId = interaction.user.id; // Получаем ID пользователя, который нажал на кнопку

    try {
      const sheetsClient = await auth.getClient();
      const spreadsheetId = '12jbeY4ENdD3-6RLe3Haek7aKK0uN5t5dvhj-U-bBeQM'; // ID вашей таблицы
      const range = 'Old Version!A:I'; // Убедитесь, что это имя вашего листа и диапаз

      const response = await sheets.spreadsheets.values.get({
        auth: sheetsClient,
        spreadsheetId,
        range,
      });

      const rows = response.data.values;
      console.log('Полученные строки:', rows); // Логируем полученные данные

      if (rows && rows.length) {
        // Ищем ID в последнем столбце (ID пользователя Discord)
        const userInfo = rows.find(row => row[9] === userId); // Предполагаем, что ID пользователя Discord находится в 7-ом столбце (индекс 6)
        if (userInfo) {
          await interaction.reply({ content: `Информация о пользователе: Nickname: ${userInfo[0]}, SSN: ${userInfo[1]}, Rank: ${userInfo[2]}, Awards: ${userInfo[3]}, Punishments: ${userInfo[4]}, Government support: ${userInfo[5]}, Note: ${userInfo[6]}, Date of enter: ${userInfo[7]}, Date of retirement: ${userInfo[8]}`, ephemeral: true });
        } else {
          await interaction.reply({ content: 'Пользователь не найден.', ephemeral: true });
        }
      } else {
        await interaction.reply({ content: 'Нет данных в таблице.', ephemeral: true });
      }
    } catch (error) {
      console.error('Ошибка при получении данных:', error);
      await interaction.reply({ content: 'Произошла ошибка при получении данных.', ephemeral: true });
    }
  }
});

// Вход в Discord
client.login('MTE5MTQwMTEzMTM4MTg5NTI4OA.G7nUNw.kR_u35ojyCMMZfIFXQeyo7hi8V6ATWNShu3MX0'); // Замените на ваш токен бота
